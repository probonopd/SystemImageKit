language: cpp
compiler: gcc
sudo: require
dist: trusty

install:
  - sudo apt-get -y install util-linux dosfstools mtools kpartx grub-pc grub-common parted util-linux # grub-efi-amd64 conflicts grub-pc

script:
  - set -e # Stop on errors, https://github.com/travis-ci/travis-ci/issues/1066
  - cd ..
  - dd if=/dev/zero of=boot.img count=64 bs=1M ####
  - parted --script boot.img mklabel msdos mkpart p fat32 1 100% set 1 boot on # # Make the partition table, partition and set it bootable
  - # http://nairobi-embedded.org/making_a_qemu_disk_image_bootable_with_grub.html#installing-grub-in-the-disk-image
  - sudo kpartx -av boot.img 
  - sudo mkdir mnt
  - sudo losetup /dev/loop1 /dev/mapper/loop0p1
  - sleep 1
  - sudo mkfs.vfat -F 32 /dev/mapper/loop0p1
  - sudo mount /dev/loop1 mnt
  - sudo df -h
  - sudo cp -r SystemImageKit/* ./mnt/
  - # sudo wget -c "http://releases.ubuntu.com/16.04.3/ubuntu-16.04.3-desktop-amd64.iso" -O ./mnt/boot/iso/ubuntu-16.04.3-desktop-amd64.iso ####
  - sudo parted /dev/loop0 set 1 boot on # Set boot flag
  - # https://superuser.com/a/200442
  - sudo grub-install --modules="biosdisk part_msdos configfile normal multiboot" --no-floppy --boot-directory=./mnt/boot --grub-mkdevicemap=./mnt/boot/grub/device.map /dev/loop0
  - sudo apt-get -y remove grub-pc 
  - sudo apt-get -y install grub-efi-amd64
  - sudo grub-install --target=x86_64-efi --efi-directory=./mnt/boot/EFI --boot-directory=./mnt/boot/ /dev/loop0 || true
  - sudo mkdir -p ./mnt/EFI/BOOT
  - sudo wget -c -q "http://ftp.scientificlinux.org/linux/fedora/releases/18/Fedora/x86_64/os/EFI/BOOT/grubx64.efi" -O ./mnt/EFI/BOOT/bootx64.efi
  - (cd ./mnt/EFI/BOOT/ && echo "7c97ca7b8220f7eda17294acf4abb2d33e86f09b12629d627cdc07b7582d9885  bootx64.efi" | sha256sum -c) || exit 1
  - sudo bash -e ./mnt/boot/iso/additional-initramfs/generate # Generate additional initrd (gets loaded in addition to the one on the ISO)
  - sudo find ./mnt/
  - sudo touch mnt/boot/grub/grub.cfg # Because it is empty?
  - sudo ./mnt/boot/bin/detect # Configure bootloader
  - sudo cat ./mnt/boot/grub/grub.cfg
  - sudo find ./mnt/boot/bin/generate-appimaged* -exec bash {} \; # Create and install ExtensionImage
  - sudo umount ./mnt
  - sudo fdisk -l /dev/loop0
  - sudo losetup -d /dev/loop1
  - sudo kpartx -v -d /dev/loop0
  - ls -lh .
  - VERSION=$(cd SystemImageKit ; git rev-parse --short HEAD)
  - mkdir -p BootImage
  - mv boot.img BootImage/BootImage.img
  - ( cd BootImage ; zip ../BootImage-$VERSION-x86_64 * )
  - DLD=$(wget -q "https://github.com/resin-io/etcher/releases" -O - | grep linux-x86_64.zip | head -n 1 | cut -d '"' -f 2)
  - wget -c -q "https://github.com/$DLD" # Workaround for https://github.com/resin-io/etcher/issues/1893
  - unzip etcher-*-linux-x86_64.zip
  - EVERSION=$(ls etcher-*x86_64.AppImage | cut -d "-" -f 2)
  - mv etcher-1.2.0-x86_64.AppImage Etcher-$EVERSION-x86_64.AppImage

after_success:
  - wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
  - bash upload.sh ./BootImage-* Etcher-*AppImage
  
branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)/
